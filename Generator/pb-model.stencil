//
//  {{ spec.title }}.swift
//
//  Generated by [ModelGen]: https://github.com/hebertialmeida/ModelGen
//  Copyright © {% now "yyyy" %} Paraná Banco SA. All rights reserved.
//

{% if spec.description %}
/// {{ spec.description }}
{% endif %}
public struct {{ spec.title }}: Codable {

    // MARK: Instance Variables

{% for property in spec.properties %}
{% if property.doc %}
    /**
     {{ property.doc }}
     */
{% endif %}
    public let {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}
{% map spec.modifiedProperties into initializerList using property %}"{{ property.name }}": "{% if property.fallback %}{{ property.fallback }}{% else %}{{ property.key }}{% endif %}"{% endmap %}
{% if initializerList.count > 0 %}
{% endif %}

    // MARK: - Initializers

{% map spec.properties into params using property %}{{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}{% endmap %}
    public init({{ params|join:", " }}) {
{% for property in spec.properties %}
        self.{{ property.name }} = {{ property.name }}
{% endfor %}
    }

    private enum CodingKeys: String, CodingKey {
    
{% for property in spec.properties %}
        case {{ property.name }} {% if property.codingKey %} = "{{ property.codingKey }}" {% else %}  {% endif %}
{% endfor %}
    }
{% if spec.encodeNil %}
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
{% for property in spec.properties %}
{% if not property.required %}
        if let _ = self.{{ property.name }} {
            try container.encode({{ property.name }}, forKey: .{{ property.name }})
        } else {
            try container.encodeNil(forKey: .{{ property.name }})
        }
{% else %}
        try container.encode({{ property.name }}, forKey: .{{ property.name }})
{% endif %}
{% endfor %}
    }
{% endif %}
{#
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
{% for property in spec.properties %}
{% if not property.required %}
        {% if property.type == "Bool" %}
        {{ property.name }} = try container.decodeOptionalBool(forKey: .{{ property.name }})
        {% else %}
{% if property.dateFormat == "nonUTCDate" %}
        self.{{ property.name }} = try? container.decode(String.self, forKey: .date, formatter: Date.timelineDateFormatter())
{% else %}
        {{ property.name }} = try? container.decode({{ property.type }}.self, forKey: .{{ property.name }})
{% endif %}
        {% endif %}
{% else %}
{% if property.type == "Bool" %}
        {{ property.name }} = try container.decodeBool(forKey: .{{ property.name }})
{% else %}
{% if property.dateFormat == "nonUTCDate" %}
        self.{{ property.name }} = try container.decode(String.self, forKey: .date, formatter: Date.timelineDateFormatter())
{% else %}
        {{ property.name }} = try container.decode({{ property.type }}.self, forKey: .{{ property.name }})
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
    }
#}
}
{#
// MARK: - Builder

extension {{ spec.title }} {

    /// :nodoc:
    public struct Builder {
{% for property in spec.properties %}
        public var {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}

        public init(copy: {{spec.title}}) {
{% for property in spec.properties %}
            {{property.name}} = copy.{{property.name}}
{% endfor %}
        }

{% map spec.properties into initializerList using property %}{{ property.name }}: {{ property.name }}{% endmap %}
        public func build() -> {{spec.title}} {
            return {{spec.title}}({{ initializerList|join:", " }})
        }
    }
}
#}
